name: Deploy Zola site to gh-pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ZOLA_VERSION: 0.21.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.75.0
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install terser and nodejieba
        run: |
          npm install -g terser
          npm install nodejieba  # Use nodejieba for better Chinese tokenization

      - name: Install Zola
        run: |
          curl -sL https://github.com/getzola/zola/releases/download/v${ZOLA_VERSION}/zola-v${ZOLA_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xz -C /usr/local/bin
          zola --version || { echo "Zola installation failed"; exit 1; }

      - name: Build with Zola
        run: |
          zola build || { echo "Error: zola build failed"; ls -la; exit 1; }
          if [ ! -d "public" ]; then
            echo "Error: public directory not found after zola build"
            ls -la
            exit 1
          fi
          ls -la public/ # Log contents for debugging
        env:
          BASE_URL: ${{ secrets.BASE_URL || 'https://AdingApkgg.github.io/tb' }}

      - name: Preprocess JSON for Chinese
        run: |
          echo "const fs = require('fs'); const jieba = require('nodejieba'); const input = JSON.parse(fs.readFileSync('public/search_index.zh.json')); const output = input.map(item => ({ ...item, title: jieba.cut(item.title).join(' '), body: jieba.cut(item.body).join(' ') })); fs.writeFileSync('public/search_index_processed.json', JSON.stringify(output));" > preprocess.js
          node preprocess.js || echo "Warning: JSON preprocessing failed, using original index"
          ls -la public/ # Verify output
        continue-on-error: true

      - name: Build tinysearch
        run: |
          cargo install tinysearch --features="bin"
          export PATH="$HOME/.cargo/bin:$PATH"
          tinysearch --optimize --path public/wasm_output public/search_index_processed.json || tinysearch --optimize --path public/wasm_output public/search_index.zh.json
          ls -la public/wasm_output/ # Log output for debugging
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true  # Ensure Cargo uses git CLI for fetching

      - name: Upload public directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zola-site-public
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download public directory artifact
        uses: actions/download-artifact@v4
        with:
          name: zola-site-public
          path: ./public

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        id: deployment
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"